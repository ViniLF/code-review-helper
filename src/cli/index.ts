#!/usr/bin/env node

import { Command } from 'commander';
import { Analyzer } from '../core/analyzer';
import { ConsoleReporter } from '../core/reporter';
import * as path from 'path';
import * as fs from 'fs';

const program = new Command();

program
  .name('revisor-codigo')
  .description('üîç Assistente automatizado de revis√£o de c√≥digo - Encontre problemas e melhore a qualidade do c√≥digo')
  .version('1.0.0');

program
  .command('analisar')
  .description('Analisa arquivos de c√≥digo em um diret√≥rio')
  .argument('<caminho>', 'caminho para analisar')
  .option('-l, --linguagem <tipo>', 'linguagem para analisar', 'javascript')
  .option('-f, --formato <tipo>', 'formato de sa√≠da', 'console')
  .option('-v, --detalhado', 'exibir informa√ß√µes detalhadas e trechos de c√≥digo')
  .option('-m, --max-problemas <numero>', 'm√°ximo de problemas por arquivo para exibir', '10')
  .action(async (targetPath: string, options) => {
    try {
      const fullPath = path.resolve(targetPath);
      
      if (!fs.existsSync(fullPath)) {
        console.error(`Erro: O caminho "${targetPath}" n√£o existe`);
        process.exit(1);
      }

      console.log(`üîç Analisando arquivos ${options.linguagem} em: ${fullPath}`);
      
      const analyzer = new Analyzer();
      const report = await analyzer.analyze(fullPath, {
        language: options.linguagem,
        includePatterns: ['**/*.js', '**/*.ts', '**/*.jsx', '**/*.tsx'],
        excludePatterns: ['node_modules/**', 'dist/**', 'build/**', '**/*.test.*', '**/*.spec.*', 'coverage/**']
      });

      const reporter = new ConsoleReporter({
        showCodeSnippets: options.detalhado || false,
        maxIssuesPerFile: parseInt(options.maxProblemas) || 10,
        verbose: options.detalhado || false
      });
      reporter.generate(report);

    } catch (error) {
      console.error('Falha na an√°lise:', error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

program
  .command('info')
  .description('Exibe informa√ß√µes sobre linguagens e detectores suportados')
  .action(() => {
    console.log('\nüîç REVISOR DE C√ìDIGO - INFORMA√á√ïES');
    console.log('='.repeat(50));
    console.log('\nüìã Linguagens Suportadas:');
    console.log('  ‚Ä¢ JavaScript (.js, .jsx, .mjs, .cjs)');
    console.log('  ‚Ä¢ TypeScript (.ts, .tsx)');
    
    console.log('\nüîß Detectores Dispon√≠veis:');
    console.log('  üîÑ Complexidade - Detecta alta complexidade ciclom√°tica');
    console.log('  üè∑Ô∏è  Nomenclatura - Verifica conven√ß√µes de nomes');
    console.log('  üìè Tamanho - Identifica arquivos/fun√ß√µes grandes');
    
    console.log('\nüí° Exemplos de Uso:');
    console.log('  revisor-codigo analisar ./src');
    console.log('  revisor-codigo analisar ./src --detalhado');
    console.log('  revisor-codigo analisar arquivo.js --linguagem javascript');
    console.log('\nüìö Dica: Use --detalhado para ver trechos de c√≥digo e sugest√µes completas');
    console.log('');
  });

program
  .command('ajuda')
  .description('Exibe guia de melhores pr√°ticas e dicas')
  .action(() => {
    console.log('\nüìö GUIA DE MELHORES PR√ÅTICAS');
    console.log('='.repeat(50));
    
    console.log('\nüîÑ COMPLEXIDADE:');
    console.log('  ‚Ä¢ Mantenha fun√ß√µes com complexidade ‚â§ 10');
    console.log('  ‚Ä¢ Divida fun√ß√µes grandes em fun√ß√µes menores');
    console.log('  ‚Ä¢ Use early returns para reduzir aninhamento');
    
    console.log('\nüè∑Ô∏è NOMENCLATURA:');
    console.log('  ‚Ä¢ Use camelCase para vari√°veis e fun√ß√µes');
    console.log('  ‚Ä¢ Use PascalCase para classes');
    console.log('  ‚Ä¢ Use UPPER_SNAKE_CASE para constantes');
    console.log('  ‚Ä¢ Prefira nomes descritivos a abrevia√ß√µes');
    
    console.log('\nüìè TAMANHO:');
    console.log('  ‚Ä¢ Fun√ß√µes: m√°ximo 50 linhas');
    console.log('  ‚Ä¢ Arquivos: m√°ximo 300 linhas');
    console.log('  ‚Ä¢ Par√¢metros: m√°ximo 5 por fun√ß√£o');
    console.log('  ‚Ä¢ Classes: m√°ximo 200 linhas');
    
    console.log('\nüí° DICAS GERAIS:');
    console.log('  ‚Ä¢ Foque nos problemas cr√≠ticos primeiro');
    console.log('  ‚Ä¢ Refatore gradualmente');
    console.log('  ‚Ä¢ Documente c√≥digo complexo');
    console.log('  ‚Ä¢ Execute a an√°lise regularmente');
    console.log('');
  });

program.parse();